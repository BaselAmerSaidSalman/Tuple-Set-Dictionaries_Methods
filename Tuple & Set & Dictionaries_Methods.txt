# Tuple_Methods ()

# 1. Type() النوع => print(type())
# 2. Count() كم مرة تكرر العنصر داخل التابل => Tuple.count(item)
# 3. Slice[] اقتطاع جزء من التابل وطباعته مثل list[][] => print(Tuple[item_index])
# 4. Index() موقع العنصر داخل التابل => print(Tuple.index(item))



# Set_Methods {item_1, item_2}

# 1. add() اضافة عناصر الى السيت ولكن يبقى المتكرر كما هو ولكن لا يمكن اضافة سيت جوا سيت اخرى بواسطتها => print(set.add(item))
# 2. update() اضافة عناصر الى السيت ولكن تحذف المتكرر وتبقى منه واحد فقط ويمكن اضافة سيت الى سيت اخرى بواسطتها => set_1.update(set_2) ثم print(set_1)
# 3. union()  نفس update() => print(variabe_1.union(variable_2))

# 4. difference = (-)  اخذ العناصر الموجودة في السيت الاولى مش موجودة في التانية ولكن تبقى السيت كما هي قبل الحذف بما بها من عناصر => print(set_1.difference(set_2)) => set_1 = set_1 before difference
# 5. difference_update()  مثل difference ولكن تجعل السيت محملة بناتج الطرح مش بالعناصر الاساسية => print(set_1.difference_update(set_2)) => set_1 = set_1 with difference
# 6. intersection() طباعة العناصر المشتركة فقط ولكن تجعل السيت بها هذه العناصر فقط دون غيرها
# 7. intersection_update() طباعة العناصر المشتركة فقط ولكن تجعل السيت بها هذه العناصر فقط دون غيرها
# 8. symmetric_difference() طباعة العناصر اللي مش مشتركة بين الاتنين ولكن تبقى السيت كما هي بما بها من عناصر قبل ذالك 
# 9. symmetric_difference_update() طباعة العناصر اللي مش مشتركة بين الاتنين ولكن تخزن هذه العناصر داخل السيت بدل من عناصرها الاساسية


# 10. copy() جعل المتغير يأخذ نسخة من المتغير التاني فيكونا متساويين ولكن اذا حدث تغير في المنسوخ لا يحدث ذالك التغير في الناسخ => variable_2 = variable_1.copy() => [variable_2 = variable_1], => variable_1.update(item) => [variable_2 != variable_1.update(item)]
# 11. remove() حذف عنصر من السيت ولكن يعطي خطأ عند عدم وجود العنصر المراد حذفه جوا السيت => set.remove(item) 
# 12. discard() حذف عنصر من السيت ولا يعطي خطأ عند عدم وجود العنصر المراد حذفه جوا السيت => set.discard(item) 

# Answer (True or False)
# 13. issuperset() التاكد من ان جميع عناصر السيت اللي بعدها موجودة جوا السيت اللي قبلها
# 14. issubset() التاكد من ان جميع عناصر السيت اللي قبلها موجودة جوا السيت اللي بعدها
# 15. isdisjoint() التاكد من ان كل سيت تحمل عناصر مختلفة عن العناصر التي تحمله السيت الاخرى وليس بينهما تشابه ولو في عنصر واحد




# Dictionaries_Methods {"key_1" : "value_1", "key_2" : "value_2"}

# 1. clear() حذف محتويات القاموس => dictionary.clear()
# 2. update() اضافة عنصر الى القاموس => dictionary.update({"" : ""})
# 3. copy() اخذ نسخة عن القاموس ولكن اذا تم التغيير في المنسوخ فلا يتغير في الناسخ
# 4. keys() طباعة keys اللي جوا القاموس => print(dictionary.keys())
# 5. values() طباعة values اللي جوا القاموس => print(dictionary.values())
# 6. setdefault("key", "value") البحث عن ما في الاقواس في القاموس ام لا فاذا وجده بيطبعه والا فيضاف الى القاموس => print(dictionary.setdefault("key", "value"))
# 7. popitem() طباعة اخر حاجه انضافت جوا القاموس => print(dictionary.popitem())
# 8. items() حفظ كل ما في القاموس جوا [] وحفظ كل عنصر بقيمته جو () => dictionary.items()
# 9. fromkeys(items, item ) جعل كل عنصر في المجموعة items تساوي قيمة item => print(dict.fromkeys(items, item)) 
# dict = dictionary